#! /bin/bash
# Copyright (c) 1999-2001 SuSE GmbH Nuernberg, Germany.
# Copyright (c) 2002-2004 SuSE Linux AG
# Copyright (c) 2015 SUSE Linux GmbH
# Copyright (c) 2021 SUSE LLC
# Copyright (c) 2023 Freek de Kruijf
#
# Author: Carsten Hoeger <feedback@suse.de>
# Author: Peter Varkoly <varkoly@suse.de>
# Author: Freek de Kruijf <freek@opensuse.org>

export LC_ALL=POSIX
umask 0022
export RUN="/var/run/"
if [ -d /run ]; then
   export RUN="/run"
fi
DB_SUFFIX="lmdb"
DEF_DB_TYPE=$(/usr/sbin/postconf -h default_database_type)
if [ ${DEF_DB_TYPE} = "hash" ]; then
        DB_SUFFIX="db"
fi
export DEF_DB_TYPE
export DB_SUFFIX

cpifnewer(){
    # remove files, that do no longer exist
    if [ -d $2 -a "$(echo $2/*)" != "$2/*" ]; then
	for i in $2/*; do
	    if [ ! -e "/$i" ]; then
		echo "removing old or no longer used $i"
		rm -f $i
	    fi
	done
    fi
    test -d $2 || mkdir -p $2
    for i in $1; do
	dst=$2/$(basename $i)
	
	if [ ! -f $dst -a ! -d $dst -a -e $i ]; then
	    echo "copying missing $dst from $i"
	    cp -afL $i $dst
	elif [ ! -d $dst -a $i -nt $dst -o $i -ot $dst ]; then
	    echo "updating $dst from $i"
	    cp -afL $i $dst
	fi
    done
}

update_db() {
    while test "x$1" != "x" ; do
	pfmap=/etc/postfix/${1%:*}
	mode=${1#*:}
        if [ "$mode" == "$1" ]; then
	    mode=644
        fi
	chmod $mode ${pfmap}
	test -e $pfmap && \
	    if test $pfmap -nt ${pfmap}.${DB_SUFFIX} -o ! -e ${pfmap}.${DB_SUFFIX} ; then
	       echo "rebuilding ${pfmap}.${DB_SUFFIX}"
	       postmap ${pfmap}
	    fi
	chmod $mode ${pfmap}.${DB_SUFFIX}
	shift
    done
}

get_alias_maps(){
    test -d /etc/aliases.d && test "$(echo /etc/aliases.d/*)" != "/etc/aliases.d/*" && \
	for i in $(find /etc/aliases.d -maxdepth 1 -type f \
		'!' -regex ".*\.\(lmdb\|db\|rpmsave\|rpmorig\)" \
		'!' -regex ".*/\(\.\|#\).*" \
		'!' -regex ".*~$") ; do
	    echo -n "$i ";
    done
}

warn_user(){
    tput bold
    echo -e "\t*** WARNING ***"
    echo -e $1
    echo -e "\t*** WARNING ***"
    tput sgr0
}

mkchroot(){

    PF_CHROOT="/var/spool/postfix"

    if [ ! -d "$PF_CHROOT" ]; then
        warn_user "\t$PF_CHROOT does not exist!!!\n\
\tThis should not happen!\n\
\tPlease reinstall package postfix or create this directory!"
        exit 1
    fi
    cd "$PF_CHROOT"

    if [ "$USE_DKIM" = "openDKIM" ] ; then
	if [ "${POSTFIX_DKIM_CONN,,}" == 'socket' ] ; then
            if [ -f /etc/opendkim/opendkim.conf ]; then
		DKIM_SOCKET=$(awk -F':' '/^Socket(\s|\t)+local/ {print $2}' /etc/opendkim/opendkim.conf)
		# support for old socket dir '/var/run'
		if [[ "${DKIM_SOCKET}" =~ ^/var/run ]]; then
		    OLD_DKIM_SOCKET='true'
		    DKIM_SOCKET="${DKIM_SOCKET#/var}"
		fi
		if [[ -z "${DKIM_SOCKET}" ]]; then
		    warn_user "\topendkim is not running with 'Socket      local:/run/opendkim/opendkim/socket
\tPlease set 'Socket' in '/etc/opendkim/opendkim.conf' as mentioned above."
		    exit 1
        	else
                    DKIM_SOCKET_DIR=$(dirname ${DKIM_SOCKET})
                    CHR_DKIM_SOCKET=${DKIM_SOCKET#/}
                    CHR_DKIM_SOCKET_DIR=$(dirname ${CHR_DKIM_SOCKET})
		fi
	    else
        	warn_user "\t/etc/opendkim/opendkim.conf does not exist!!\n\
\tThis should not happen!\n\
\tPlease check if opendkim is installed."
	    fi
        fi
    fi
    
    if [ "$(echo "$POSTFIX_MYSQL_CONN" | tr 'A-Z' 'a-z' )" == "socket" -a \
        "$(echo "$POSTFIX_WITH_MYSQL" | tr 'A-Z' 'a-z' )" != "no" ]; then
        if [ -n "$(my_print_defaults mysqld)" ]; then
          MYSQL_SOCKET=$(my_print_defaults mysqld | awk -F"=" '/--socket/ {print $2}')
            # fix for: Can't connect to local MySQL server through socket '/run/mysql/mysql.sock' (2)
            if [[ "${MYSQL_SOCKET}" =~ ^/var/run ]]; then
                OLD_MYSQL_SOCKET='true'
                MYSQL_SOCKET="${MYSQL_SOCKET#/var}"
            fi
            if [[ -z "${MYSQL_SOCKET}" ]]; then
                warn_user "\tmysqld is not running with '--socket' option !!!\n\
\tPlease uncomment '# socket = /var/run/mysql/mysql.sock' in /etc/my.cnf and restart mysqld."
                exit 1
            else
              MYSQL_SOCKET_DIR=$(dirname $MYSQL_SOCKET)
              CHR_MYSQL_SOCKET=$(echo $MYSQL_SOCKET | sed -e "s,/,,")
              CHR_MYSQL_SOCKET_DIR=$(dirname $CHR_MYSQL_SOCKET)
            fi
        else
          warn_user "\t/etc/my.cnf does not exist!!\n\
\tThis should not happen!\n\
\tPlease check if postfix-mysql is installed and check for package mysql."
        fi
    fi
    if [ "$(echo "$POSTFIX_SMTP_AUTH_SERVICE" | tr 'A-Z' 'a-z' )" == "cyrus" -a \
        "$(echo "$POSTFIX_SMTP_AUTH_SERVER" | tr 'A-Z' 'a-z' )" != "no" ]; then
        SASL_SOCKET_DIR="$RUN/sasl2"
        CHR_SASL_SOCKET_DIR="run/sasl2"
    fi
    if [ "$(echo "$POSTFIX_CHROOT" | tr 'A-Z' 'a-z' )" != "yes" ]; then
      # tidy-up in any case, to be safe (bnc#837561)
      if grep '[[:blank:]]/var/spool/postfix/proc[[:blank:]]' /proc/mounts &> /dev/null; then
         umount /var/spool/postfix/proc
      fi
      if [ -d etc ]; then
          echo "removing postfix chroot environment..."
      fi

      if [[ -n "${CHR_DKIM_SOCKET_DIR}" ]]; then
        if grep "${PF_CHROOT}"/${CHR_DKIM_SOCKET_DIR} /proc/mounts &> /dev/null; then
          umount "${PF_CHROOT}"/${CHR_DKIM_SOCKET_DIR}
        fi
      fi
      
      if [ -n "$CHR_MYSQL_SOCKET_DIR" ]; then
        if grep "$PF_CHROOT"/$CHR_MYSQL_SOCKET_DIR /proc/mounts &> /dev/null; then
          umount "$PF_CHROOT"/$CHR_MYSQL_SOCKET_DIR
        fi
      fi

      if [ -n "$CHR_SASL_SOCKET_DIR" ]; then
        if grep "$PF_CHROOT"/$CHR_SASL_SOCKET_DIR /proc/mounts &> /dev/null; then
          umount "$PF_CHROOT"/$CHR_SASL_SOCKET_DIR
        fi
      fi
      
      rm -rvf etc lib64 run usr var proc
    else
      echo "checking postfix chroot environment..."

      if [ -e /lib/security/pam_ldap.so ]; then
          cpifnewer /etc/openldap/ldap.conf etc/openldap
      fi

      if [ "${USE_DKIM}" = "no" -o "${USE_DKIM}" = "yes" } ]; then
        if [[ -n "${CHR_DKIM_SOCKET_DIR}" ]]; then
          if grep "${PF_CHROOT}"/${CHR_DKIM_SOCKET_DIR} /proc/mounts &> /dev/null; then
            umount "${PF_CHROOT}"/${CHR_DKIM_SOCKET_DIR}
          fi
        fi
      fi

      if [ "${POSTFIX_DKIM_CONN,,}" == "socket" -a \
          "${USE_DKIM,,}" = "openDKIM" ]; then
          if [[ ! -d ${CHR_DKIM_SOCKET_DIR} ]]; then
            mkdir -p ${CHR_DKIM_SOCKET_DIR}
          fi
          # support for old socket dir '/var/run'
          if [[ "${OLD_DKIM_SOCKET}" == 'true' ]]; then
            [[ ! -d var ]] && mkdir var
            ln -s ../run var/run
          fi
          if ! grep ${CHR_DKIM_SOCKET_DIR} /proc/mounts &> /dev/null; then
            mount -o bind ${DKIM_SOCKET_DIR} "${PF_CHROOT}"/${CHR_DKIM_SOCKET_DIR}
          fi
      fi

      if [ "$(echo "$POSTFIX_WITH_MYSQL" | tr 'A-Z' 'a-z' )" != "yes" ]; then
        if [ -n "$CHR_MYSQL_SOCKET_DIR" ]; then
          if grep "$PF_CHROOT"/$CHR_MYSQL_SOCKET_DIR /proc/mounts &> /dev/null; then
            umount "$PF_CHROOT"/$CHR_MYSQL_SOCKET_DIR
          fi
        fi
      fi

      if [ "$(echo "$POSTFIX_MYSQL_CONN" | tr 'A-Z' 'a-z' )" == "socket" -a \
          "$(echo "$POSTFIX_WITH_MYSQL" | tr 'A-Z' 'a-z' )" != "no" ]; then
          if [ ! -d $CHR_MYSQL_SOCKET_DIR ]; then
            mkdir -p $CHR_MYSQL_SOCKET_DIR
          fi
          if [[ "${OLD_MYSQL_SOCKET}" == 'true' ]]; then
            [[ ! -d var ]] && mkdir var
            ln -s ../run var/run
          fi
          if ! grep $CHR_MYSQL_SOCKET_DIR /proc/mounts &> /dev/null; then
            mount -o bind $MYSQL_SOCKET_DIR "$PF_CHROOT"/$CHR_MYSQL_SOCKET_DIR
          fi
      fi

      if [ "$(echo "$POSTFIX_SMTP_AUTH_SERVICE" | tr 'A-Z' 'a-z' )" == "cyrus" -a \
          "$(echo "$POSTFIX_SMTP_AUTH_SERVER" | tr 'A-Z' 'a-z' )" != "no" ]; then
          if [ ! -d $CHR_SASL_SOCKET_DIR ]; then
            mkdir -p $CHR_SASL_SOCKET_DIR
          fi
          if ! grep $CHR_SASL_SOCKET_DIR /proc/mounts &> /dev/null; then
            mount -o bind $SASL_SOCKET_DIR "$PF_CHROOT"/$CHR_SASL_SOCKET_DIR
          fi
      fi

      # sync our ssl DIR if SSL is enabled (at least one service)
      ## POSTFIX_SMTP_TLS_SERVER="yes" or POSTFIX_SMTP_TLS_CLIENT="yes|must"
      if [ "$(echo "$POSTFIX_SMTP_TLS_SERVER" | tr 'A-Z' 'a-z' )" != "no" -o \
          "$(echo "$POSTFIX_SMTP_TLS_CLIENT" | tr 'A-Z' 'a-z' )" != "no" ]; then

          # sync the CA certificates
          [[ -d ./etc/ssl ]] && install -d ./etc/ssl ;
          rsync -avH --copy-unsafe-links /etc/ssl/certs ./etc/ssl

          # sync default postfix ssl DIR (/etc/postfix/ssl)
          [[ ! -d "./${POSTFIX_SSL_PATH}" ]] && mkdir -p ./"${POSTFIX_SSL_PATH}";
          rsync -avH "${POSTFIX_SSL_PATH}"/* ./"${POSTFIX_SSL_PATH}/"
      fi

      # PAM
      cpifnewer "/etc/pam.d/*" etc/pam.d
      cpifnewer "/lib64/security/*" lib64/security
      cpifnewer "/lib64/libpam*" lib64
      cpifnewer "/usr/lib64/libcrack.so*" usr/lib64

      # SASL
      cpifnewer /etc/sasldb2 etc
      cpifnewer "/etc/sasl2/*" etc/sasl2
      cpifnewer "/usr/lib64/sasl2/*" usr/lib64/sasl2
      cpifnewer "/usr/lib64/libsasl2*" usr/lib64

      # CYRUS
      mkdir -p var/lib/imap/socket/
      ln -f /var/lib/imap/socket/lmtp var/lib/imap/socket/lmtp

      cpifnewer "/lib64/libnss*" lib64
      cpifnewer "/lib64/libresolv*" lib64
      cpifnewer "/lib64/libdb*" lib64
      cpifnewer "/lib64/libxcrypt*" lib64

      cpifnewer /etc/host.conf etc
      cpifnewer /etc/nsswitch.conf etc
      cpifnewer /etc/resolv.conf etc
      cpifnewer /etc/services etc
      cpifnewer /etc/hosts etc
      cpifnewer /etc/passwd etc

      if [ -L /etc/localtime ]; then
          if [ -z "$TIMEZONE" -o "$TIMEZONE" == "YAST_ASK" ]; then
              warn_user "\tUnable to setup your timezone!\n\
\tThe logging of the current time in /var/log/mail may be wrong!\n\
\tPlease set the variable TIMEZONE in /etc/sysconfig/clock!"
            else
                mkdir -p usr/share/zoneinfo/$(dirname $TIMEZONE)
                if [ ! -e /usr/share/zoneinfo/$TIMEZONE ]; then
                    warn_user "\t$TIMEZONE is not a regular timezone or the corresponding\n\
\tfile at /usr/share/zoneinfo does not exist"
              else
                  cp -af /usr/share/zoneinfo/$TIMEZONE usr/share/zoneinfo/$TIMEZONE
                  ln -sf ../usr/share/zoneinfo/$TIMEZONE etc/localtime
              fi
          fi
      else
          cpifnewer /etc/localtime etc
      fi

      # do not chown -R root /var/spool/postfix/var
      # this will break ownership for mysql on suse < 1120
      if [ "$(echo "$POSTFIX_WITH_MYSQL" | tr 'A-Z' 'a-z' )" != "no" ]; then
        chown -R root "$PF_CHROOT"/{etc,lib64,usr}
      else
        chown -R root "$PF_CHROOT"/{etc,lib64,usr,var}
      fi
    fi
    # "$POSTFIX_CHROOT"
}

gen_main_cf(){
    TMPDIR=$(mktemp -d /tmp/config.postfix.XXXXXX) || exit 1
    PCONF="/usr/sbin/postconf -c $TMPDIR"

    export USE_DKIM
    # needed when for WITH_LDAP
    export POSTFIX_WITH_LDAP
    # needed when for WITH_MYSQL
    export POSTFIX_WITH_MYSQL
    export POSTFIX_RELAY_DOMAINS
    export POSTFIX_RELAY_RECIPIENTS
    export POSTFIX_BACKUPMX
    export DEF_DB_TYPE
    MCF_DIR=$TMPDIR
    export MCF_DIR

    if [ $? -ne 0 ]; then
       warn_user "Can't create temp directory, exiting..."
       exit 1
    fi
    cp -f /etc/postfix/{main,master}.cf $TMPDIR

    # Some default settings, that seem to be useable, at least to me
    $PCONF -e "mail_spool_directory = /var/mail"
    $PCONF -e "canonical_maps = $DEF_DB_TYPE:/etc/postfix/canonical"
    # virtual_alias_domains (default: $virtual_alias_maps)
    #$PCONF -e "virtual_alias_domains = $DEF_DB_TYPE:/etc/postfix/virtual"
    $PCONF -e "relocated_maps = $DEF_DB_TYPE:/etc/postfix/relocated"
    if [ "$(echo "$POSTFIX_TRANSPORT_MAPS" | tr 'A-Z' 'a-z' )" != "" ]; then
      $PCONF -e "transport_maps = $POSTFIX_TRANSPORT_MAPS"
    else
      $PCONF -e "transport_maps = $DEF_DB_TYPE:/etc/postfix/transport"
    fi
    $PCONF -e "sender_canonical_maps = $DEF_DB_TYPE:/etc/postfix/sender_canonical"
    $PCONF -e "masquerade_exceptions = root"
    $PCONF -e "masquerade_classes = envelope_sender, header_sender, header_recipient"
    if [ -n "${FQHOSTNAME}" ]; then
      $PCONF -e "myhostname = $FQHOSTNAME"
      $PCONF -e 'smtpd_sasl_local_domain = $myhostname'
    fi
    $PCONF -e "delay_warning_time = 1h"
    $PCONF -e 'message_strip_characters = \0'

    # to be on the save side
    $PCONF -e "daemon_directory = /usr/lib/postfix/bin/"
    $PCONF -e "readme_directory = /usr/share/doc/packages/postfix-doc/README_FILES"
    $PCONF -e "html_directory = /usr/share/doc/packages/postfix-doc/html"
    $PCONF -e "sample_directory = /usr/share/doc/packages/postfix-doc/samples"
    $PCONF -e "sendmail_path = /usr/sbin/sendmail"
    $PCONF -e "setgid_group = maildrop"
    $PCONF -e "manpage_directory = /usr/share/man"
    $PCONF -e "newaliases_path = /usr/bin/newaliases"
    $PCONF -e "mailq_path = /usr/bin/mailq"
    if [ "$(echo "$POSTFIX_INET_PROTO" | tr 'A-Z' 'a-z' )" != "" ]; then
      $PCONF -e "inet_protocols = $POSTFIX_INET_PROTO"
    else
	if [ "$( ip addr show dev lo | grep inet6 )" ]; then
 		$PCONF -e "inet_protocols = all"
	else
 		$PCONF -e "inet_protocols = ipv4"
	fi
    fi
    if test "$SMTPD_LISTEN_REMOTE" == "yes" ; then
      if [ "$(echo "$POSTFIX_LISTEN" | tr 'A-Z' 'a-z' )" != "" ]; then
        $PCONF -e "inet_interfaces = $POSTFIX_LISTEN"
      else
        $PCONF -e "inet_interfaces = all"
      fi
    else
        $PCONF -e "inet_interfaces = localhost"
    fi
    test -n "$POSTFIX_MASQUERADE_DOMAIN" && \
        MASQ_DOMS=$POSTFIX_MASQUERADE_DOMAIN
    if [ -n "$FROM_HEADER" -a "$FROM_HEADER" != "YAST_ASK" ]; then
        if [ -n "$MASQ_DOMS" ]; then
            MASQ_DOMS="$MASQ_DOMS, $FROM_HEADER"
        else 
            MASQ_DOMS="$FROM_HEADER"
        fi
    fi
    $PCONF -e "masquerade_domains = $MASQ_DOMS"
    
    if test -z "$POSTFIX_LOCALDOMAINS"; then
        if [ -n "${FQHOSTNAME}" ]; then
	    mydest='$myhostname, $mydomain, localhost.$mydomain, localhost'
	    [ -n "$POSTFIX_SSL_COMMON_NAME" -a "$POSTFIX_SSL_COMMON_NAME" != "$FQHOSTNAME" ] && \
		mydest="$mydest, $POSTFIX_SSL_COMMON_NAME"
            $PCONF -e "mydestination = $mydest"
	    $PCONF -e 'myorigin = $mydomain'
        else
            $PCONF -e 'mydestination = $myhostname, localhost.$mydomain'
        fi
    else
        $PCONF -e "mydestination = $POSTFIX_LOCALDOMAINS"
    fi

    # this overrides the previous
    if test "$POSTFIX_NULLCLIENT" == "yes"; then
	$PCONF -e "mydestination = "
    fi

    if test "$POSTFIX_DIALUP" == "yes"; then
	$PCONF -e "defer_transports = smtp"
	$PCONF -e "mynetworks_style = host"
    else
	$PCONF -e "defer_transports = "
	if test -n "$POSTFIX_ADD_MYNETWORKS_STYLE"
	then
	  $PCONF -e "mynetworks_style = $POSTFIX_ADD_MYNETWORKS_STYLE"
	fi
    fi

    if test  "$POSTFIX_NODNS" == "yes"; then
	$PCONF -e "disable_dns_lookups = yes"
    else
	$PCONF -e "disable_dns_lookups = no"
    fi
    if test -n "$POSTFIX_RELAYHOST"; then
	$PCONF -e "relayhost = $POSTFIX_RELAYHOST"
    else
	$PCONF -e "relayhost = "
    fi
    if [ "$(echo "$USE_AMAVIS" | tr 'A-Z' 'a-z' )" != "yes" ]; then
	$PCONF -e "content_filter = "
    else
	$PCONF -e "content_filter = amavis:[127.0.0.1]:10024"
    fi

    case "$POSTFIX_MDA" in
	procmail)
	    echo 1>&2 "Setting up procmail as MDA..."
	    if [ ! -x /usr/bin/procmail ]; then
		warn_user 1>&2 "procmail is not installed, using local as MDA!"
		$PCONF -e "mailbox_command = "
		$PCONF -e "mailbox_transport = "
	    else
		$PCONF -e "mailbox_command = /usr/bin/procmail"
		$PCONF -e "mailbox_transport = "
	    fi
	    $PCONF -e "disable_mime_output_conversion = no"
	    ;;
	cyrus)
	    echo 1>&2 "Setting up cyrus-imapd via lmtp as MDA..."
	    if [ ! -x /usr/lib/cyrus/bin/lmtpd ]; then
		warn_user 1>&2 "cyrus-imapd is not installed, using local as MDA!"
		$PCONF -e "mailbox_command = "
		$PCONF -e "mailbox_transport = "
	    else
		LMTPUNIX=$(grep -E "^[[:blank:]]*lmtpunix.*" /etc/cyrus.conf)
		if [ -z "$LMTPUNIX" ]; then
		    warn_user 1>&2 "you have to add\n\
lmtpunix      cmd=\"lmtpd\" listen=\"/var/lib/imap/socket/lmtp\" prefork=1\n\
to /etc/cyrus.conf"
		else
		    if [ -z "$(echo $LMTPUNIX | grep -E '/var/lib/imap/socket/lmtp')" ]; then
			warn_user 1>&2 "the socket to listen on is wrong in /etc/cyrus.conf\n\
use listen=\"/var/lib/imap/socket/lmtp\" instead!"
		    fi
		fi
		$PCONF -e "mailbox_command = "
		$PCONF -e "mailbox_transport = lmtp:unix:/var/lib/imap/socket/lmtp"
		$PCONF -e "disable_mime_output_conversion = no"
		if [ -z "$(id postfix | grep -E 'groups=.*mail')" ]; then
			warn_user 1>&2 "adding postfix user to group mail"
			usermod -G mail postfix
		fi
	    fi
	    ;;
	dovecot)
	    echo 1>&2 "Setting up dovecot as MDA..."
	    if [ ! -x /usr/lib/dovecot/deliver ]; then
		warn_user 1>&2 "dovecot is not installed, using local as MDA!"
		$PCONF -e "mailbox_command = "
		$PCONF -e "mailbox_transport = "
	    else
		$PCONF -e "mailbox_command = /usr/lib/dovecot/deliver"
		$PCONF -e "mailbox_transport = "
	    fi
	    $PCONF -e "disable_mime_output_conversion = no"
	    ;;
	local|*)
	       echo 1>&2 "Setting up postfix local as MDA..."
	       $PCONF -e "mailbox_command = "
	       $PCONF -e "mailbox_transport = "
	       $PCONF -e "disable_mime_output_conversion = no"
	    ;;
    esac

    case "$POSTFIX_BASIC_SPAM_PREVENTION" in
	medium)
	    echo 1>&2 "Setting up medium SPAM protection..."
	    $PCONF -e "smtpd_sender_restrictions = $DEF_DB_TYPE:/etc/postfix/access, reject_unknown_sender_domain"
	    if test -n "$POSTFIX_RBL_HOSTS"; then
		rblhosts=$(echo ${POSTFIX_RBL_HOSTS//,/ })
		clnt_restrictions=""
		for i in $rblhosts; do
		    if [ -z "$clnt_restrictions" ]; then
			clnt_restrictions="reject_rbl_client $i"
		    else
			clnt_restrictions="$clnt_restrictions, reject_rbl_client $i"
		    fi
		done
		$PCONF -e "smtpd_client_restrictions = $clnt_restrictions"
	    else
		$PCONF -e "smtpd_client_restrictions ="
	    fi
	    $PCONF -e "smtpd_helo_required = yes"
	    $PCONF -e "smtpd_helo_restrictions = "
	    $PCONF -e "strict_rfc821_envelopes = no"
	    $PCONF -e "smtpd_recipient_restrictions = permit_mynetworks, reject_unauth_destination "
	    $PCONF -e "smtpd_noop_commands = etrn"
	    ;;
	hard)
	    echo 1>&2 "Setting up hard SPAM protection..."
	    $PCONF -e "smtpd_sender_restrictions = $DEF_DB_TYPE:/etc/postfix/access, reject_unknown_sender_domain"
	    if test -n "$POSTFIX_RBL_HOSTS"; then
		rblhosts=$(echo ${POSTFIX_RBL_HOSTS//,/ })
		clnt_restrictions=""
		for i in $rblhosts; do
		    if [ -z "$clnt_restrictions" ]; then
			clnt_restrictions="reject_rbl_client $i"
		    else
			clnt_restrictions="$clnt_restrictions, reject_rbl_client $i"
		    fi
		done
		$PCONF -e "smtpd_client_restrictions = permit_mynetworks, $clnt_restrictions, reject_unknown_client"

	    else
		$PCONF -e \
		    "smtpd_client_restrictions = permit_mynetworks, reject_unknown_client"
	    fi
	    $PCONF -e "smtpd_helo_required = yes"
	    $PCONF -e "smtpd_helo_restrictions = permit_mynetworks, reject_invalid_hostname"
	    $PCONF -e "strict_rfc821_envelopes = yes"
	    $PCONF -e "smtpd_recipient_restrictions = permit_mynetworks, reject_unauth_destination"
	    $PCONF -e "smtpd_noop_commands = etrn"
	    ;;
	custom)
	    echo 1>&2 "Setting up custom SPAM protection..."
	    $PCONF -e "smtpd_helo_required = yes"
	    $PCONF -e "strict_rfc821_envelopes = no"
	    if [ -n "$POSTFIX_SMTPD_CLIENT_RESTRICTIONS" ]; then
		s_clnt_restrictions=$(echo ${POSTFIX_SMTPD_CLIENT_RESTRICTIONS/\ \+/,/ })
	    else
		echo 1>&2 "No smtpd_client_restrictions defined ... setting to medium ..."
		s_clnt_restrictions="reject_unauth_pipelining, reject_unknown_client"
	    fi
	    if [ -n "$POSTFIX_RBL_HOSTS" ]; then
		rblhosts=$(echo ${POSTFIX_RBL_HOSTS//,/ })
		maps_rbl=""
		for i in $rblhosts; do
		    if [ -z "$maps_rbl" ]; then
			maps_rbl="reject_rbl_client $i"
		    else
			maps_rbl="$maps_rbl, reject_rbl_client $i"
		    fi
		done
		$PCONF -e "smtpd_client_restrictions = $s_clnt_restrictions, $maps_rbl"
	    else
		$PCONF -e "smtpd_client_restrictions = $s_clnt_restrictions"
	    fi
	    if [ -n "$POSTFIX_SMTPD_HELO_RESTRICTIONS" ]; then
		helo_restrictions=$(echo ${POSTFIX_SMTPD_HELO_RESTRICTIONS/\ \+/,/ })
		$PCONF -e "smtpd_helo_restrictions = $helo_restrictions"
	    else
		$PCONF -e "smtpd_helo_restrictions = reject_unauth_pipelining, reject_unknown_client"
	    fi
	    if [ -n "$POSTFIX_SMTPD_SENDER_RESTRICTIONS" ]; then
		sender_restrictions=$(echo ${POSTFIX_SMTPD_SENDER_RESTRICTIONS/\ \+/,/ })
		$PCONF -e "smtpd_sender_restrictions = $sender_restrictions"
	    else
		$PCONF -e "smtpd_sender_restrictions = $DEF_DB_TYPE:/etc/postfix/access, reject_unknown_sender_domain"
	    fi
	    if [ -n "$POSTFIX_SMTPD_RECIPIENT_RESTRICTIONS" ]; then
		rcpt_restrictions=$(echo ${POSTFIX_SMTPD_RECIPIENT_RESTRICTIONS/\ \+/,/ })
	    fi
	    if [ -z "$POSTFIX_SMTPD_RECIPIENT_RESTRICTIONS" ]; then
		echo 1>&2 "No smtp_recipient_restrictions defined ... setting to medium ..."
		$PCONF -e "smtpd_recipient_restrictions = permit_mynetworks, reject_unauth_destination"
	    else
		$PCONF -e "smtpd_recipient_restrictions = $rcpt_restrictions"
	    fi
	    ;;
	*)
	    if [ "$( echo "$POSTFIX_BASIC_SPAM_PREVENTION" | tr 'A-Z' 'a-z' )" != "off" ]; then
		warn_user 1>&2 "$POSTFIX_BASIC_SPAM_PREVENTION is an invalid value for POSTFIX_BASIC_SPAM_PREVENTION\n\
using \"off\" instead!"
	    fi
	    echo 1>&2 "Setting SPAM protection to \"off\"..."
	    $PCONF -e "smtpd_sender_restrictions = $DEF_DB_TYPE:/etc/postfix/access"
	    $PCONF -e "smtpd_client_restrictions ="
	    $PCONF -e "smtpd_helo_required = no"
	    $PCONF -e "smtpd_helo_restrictions ="
	    $PCONF -e "strict_rfc821_envelopes = no"
	    $PCONF -e "smtpd_recipient_restrictions = permit_mynetworks,reject_unauth_destination"
	    ;;
    esac

    if [ "$( echo "$POSTFIX_SMTP_AUTH" | tr 'A-Z' 'a-z' )" != "no" ]; then
        $PCONF -e "smtp_sasl_auth_enable = yes"
	[ -z "$POSTFIX_SMTP_AUTH_OPTIONS" ] && POSTFIX_SMTP_AUTH_OPTIONS="noanonymous"
        $PCONF -e "smtp_sasl_security_options = $POSTFIX_SMTP_AUTH_OPTIONS"
	$PCONF -e "smtp_sasl_security_options = $POSTFIX_SMTP_AUTH_OPTIONS"
        $PCONF -e "smtp_sasl_password_maps = $DEF_DB_TYPE:/etc/postfix/sasl_passwd"
    else
        $PCONF -e "smtp_sasl_auth_enable = no"
        $PCONF -e "smtp_sasl_security_options = "
        $PCONF -e "smtp_sasl_password_maps = "
    fi

    if [ "$(echo "$POSTFIX_SMTP_AUTH_SERVER" | tr 'A-Z' 'a-z' )" != "no" ]; then
        $PCONF -e "smtpd_sasl_auth_enable= yes"
        if [ "$(echo "$POSTFIX_SMTP_AUTH_SERVICE" | tr 'A-Z' 'a-z' )" == "cyrus" ]; then
#            if [ -f /etc/sasl2/smtpd.conf ]; then
#                grep saslauthd /etc/sasl2/smtpd.conf >/dev/null && {
#                    checkproc -p $RUN/sasl2/saslauthd.pid /usr/sbin/saslauthd || {
#                    warn_user 1>&2 "You are using saslauthd as pwcheck_method in /etc/sasl2/smtpd.conf,\n\
#but saslauthd is not running."
#                    }
#                }
#            elif [ -f /usr/lib64/sasl2/smtpd.conf ]; then
#                grep saslauthd /usr/lib64/sasl2/smtpd.conf >/dev/null && {
#                    checkproc -p $RUN/sasl2/saslauthd.pid /usr/sbin/saslauthd || {
#                    warn_user 1>&2 "You are using saslauthd as pwcheck_method in /usr/lib64/sasl2/smtpd.conf,\n\
#but saslauthd is not running."
#                    }
#                }
#            else
#                warn_user 1>&2 "You have activated POSTFIX_SMTP_AUTH_SERVER, but you don't have /etc/sasl2/smtpd.conf (nor /usr/lib64/sasl2/smtpd.conf)"
#            fi
	    if [ "$(systemctl is-active saslauthd.service)" != "active" ] ; then
		warn_user 1>&2 "You should be using saslauthd for password checking, but saslauthd is not running."
	    fi
            $PCONF -e "smtpd_sasl_path= smtpd"
            $PCONF -e "smtpd_sasl_type= cyrus"
        fi
        if [ "$(echo "$POSTFIX_SMTP_AUTH_SERVICE" | tr 'A-Z' 'a-z' )" == "dovecot" ]; then
            $PCONF -e "smtpd_sasl_path= private/auth"
            $PCONF -e "smtpd_sasl_type= dovecot"
	    $PCONF -e "home_mailbox = Maildir/"
        fi
            touch -m -d "1 minute ago" $TMPDIR/main.cf
            CURRENT=$($PCONF -h smtpd_helo_restrictions)
        $PCONF -e "smtpd_helo_restrictions= permit_sasl_authenticated, $CURRENT"
            touch -m -d "1 minute ago" $TMPDIR/main.cf
            CURRENT=$($PCONF -h smtpd_client_restrictions)
        $PCONF -e "smtpd_client_restrictions= permit_sasl_authenticated, $CURRENT"
            touch -m -d "1 minute ago" $TMPDIR/main.cf
            CURRENT=$($PCONF -h smtpd_sender_restrictions)
        $PCONF -e "smtpd_sender_restrictions= permit_sasl_authenticated, $CURRENT"
            touch -m -d "1 minute ago" $TMPDIR/main.cf
            CURRENT=$($PCONF -h smtpd_recipient_restrictions)
        $PCONF -e "smtpd_recipient_restrictions= permit_sasl_authenticated, $CURRENT"
    else
        $PCONF -e "smtpd_sasl_auth_enable= no"
        ### no need to comment, cause it is set to default anyway
        ### and 'uncommenting' would place it at end of file then
        ### which is not wanted
        #$PCONF -# "smtpd_sasl_path"
        #$PCONF -# "smtpd_sasl_type"
    fi

    if test "$POSTFIX_SMTP_TLS_SERVER_LEGACY_SUPPORT" == "yes"; then
	if [ -z "$( getent services submissions )" ]; then
	    warn_user 1>&2 "adding service \"submissions\" to /etc/services"
	    echo "submissions           465/tcp         # smtp over SSL" >> /etc/services
	fi
    fi
    if test "$POSTFIX_SMTP_TLS_SERVER" == "yes" -o "$POSTFIX_SMTP_TLS_SERVER_LEGACY_SUPPORT" == "yes"; then
	if [ -z "$POSTFIX_TLS_CERTFILE" -o -z "$POSTFIX_TLS_KEYFILE" -o ! -e "$POSTFIX_SSL_PATH/$POSTFIX_TLS_CERTFILE" -o ! -e "$POSTFIX_SSL_PATH/$POSTFIX_TLS_KEYFILE" ]; then
	# BNC#981097 config.postfix creates broken main.cf for tls client configuration
	    warn_user 1>&2 "You have activated POSTFIX_SMTP_TLS_SERVER, but you don't have created or configured certificates."
	else
	    $PCONF -e "smtpd_use_tls = yes"
	    $PCONF -e "smtpd_enforce_tls = no"
	    $PCONF -e "smtpd_tls_security_level = may"
	    if [ -n "$POSTFIX_TLS_CAFILE" -a -s "$POSTFIX_SSL_PATH/$POSTFIX_TLS_CAFILE" ]; then
		$PCONF -e "smtpd_tls_CAfile = $POSTFIX_SSL_PATH/$POSTFIX_TLS_CAFILE"
	    fi
	    $PCONF -e "smtpd_tls_CApath = $POSTFIX_SSL_PATH/cacerts"
            if [ -n "$POSTFIX_TLS_CERTFILE" ]; then
		if [ -s "$POSTFIX_SSL_PATH/$POSTFIX_TLS_CERTFILE" ]; then
		    $PCONF -e "smtpd_tls_cert_file = $POSTFIX_SSL_PATH/$POSTFIX_TLS_CERTFILE"
		else
		    warn_user 1>&2 "\t smtpd_tls_cert_file (POSTFIX_SSL_PATH/POSTFIX_TLS_CERTFILE) does not exist!!\n"
        	fi
            else
		$PCONF -e "smtpd_tls_cert_file ="
	    fi
	    if [ -n "$POSTFIX_TLS_KEYFILE" ]; then
		if [ -s "$POSTFIX_SSL_PATH/$POSTFIX_TLS_KEYFILE" ]; then
		    $PCONF -e "smtpd_tls_key_file = $POSTFIX_SSL_PATH/$POSTFIX_TLS_KEYFILE"
		else
		    warn_user 1>&2 "\t smtpd_tls_key_file (POSTFIX_SSL_PATH/POSTFIX_TLS_KEYFILE) does not exist!!\n"
		fi
	    else
		$PCONF -e "smtpd_tls_key_file ="
	    fi
	    $PCONF -e "relay_clientcerts = $DEF_DB_TYPE:/etc/postfix/relay_ccerts"
	    $PCONF -e "smtpd_tls_ask_ccert = yes"
	    $PCONF -e "smtpd_tls_received_header = yes"
	    touch -m -d "1 minute ago" $TMPDIR/main.cf
	    CURRENT=$($PCONF -h smtpd_recipient_restrictions)
	    $PCONF -e "smtpd_recipient_restrictions = permit_tls_clientcerts, $CURRENT"
	fi
    else
	$PCONF -e "smtpd_use_tls = no"
	$PCONF -e "smtpd_enforce_tls = no"
	$PCONF -e "smtpd_tls_security_level ="
	$PCONF -e "smtpd_tls_CAfile ="
	$PCONF -e "smtpd_tls_CApath ="
	$PCONF -e "smtpd_tls_cert_file ="
	$PCONF -e "smtpd_tls_key_file ="
	$PCONF -e "relay_clientcerts ="
	$PCONF -e "smtpd_tls_ask_ccert = no"
	$PCONF -e "smtpd_tls_received_header = no"
    fi

    if test "$POSTFIX_SMTP_TLS_CLIENT" == "no"; then
	    $PCONF -e "smtp_use_tls = no"
	    $PCONF -e "smtp_enforce_tls = no"
	    $PCONF -e "smtp_tls_security_level ="
    fi
    if test "$POSTFIX_SMTP_TLS_CLIENT" == "yes"; then
	    $PCONF -e "smtp_use_tls = yes"
	    $PCONF -e "smtp_enforce_tls = no"
	    $PCONF -e "smtp_tls_security_level = may"
	    $PCONF -e "smtp_tls_ciphers = medium"
	    $PCONF -e "smtp_tls_protocols = >=TLSv1, <=TLSv1.3"
    fi
#    if test "$POSTFIX_SMTP_TLS_CLIENT" == "must"; then
#	    $PCONF -e "smtp_use_tls = yes"
#	    $PCONF -e "smtp_enforce_tls = yes"
#	    $PCONF -e "smtp_tls_security_level = encrypt"
#	    $PCONF -e "smtp_tls_ciphers = medium"
#	    $PCONF -e "smtp_tls_protocols = >=TLSv1, <=TLSv1.3"
#    fi
#    Removed: "encrypt" is not meant to be used in main.cf
    if test "$POSTFIX_SMTP_TLS_CLIENT" = "yes" -o "$POSTFIX_SMTP_TLS_CLIENT" = "must" ; then
	if [[ "${POSTFIX_SMTP_AUTH}" = 'yes' ]]; then
	    $PCONF -e "smtp_tls_security_level = encrypt"
	fi
	if [ -n "$POSTFIX_TLS_CAFILE" -a -s "$POSTFIX_SSL_PATH/$POSTFIX_TLS_CAFILE" ]; then
	    $PCONF -e "smtp_tls_CAfile = $POSTFIX_SSL_PATH/$POSTFIX_TLS_CAFILE"
	fi
	$PCONF -e "smtp_tls_CApath = $POSTFIX_SSL_PATH/cacerts"
	if [ -n "$POSTFIX_TLS_CERTFILE" ]; then
	    if [ -s "$POSTFIX_SSL_PATH/$POSTFIX_TLS_CERTFILE" ]; then
		$PCONF -e "smtp_tls_cert_file = $POSTFIX_SSL_PATH/$POSTFIX_TLS_CERTFILE"
	    else
		warn_user 1>&2 "\t smtp_tls_cert_file (POSTFIX_SSL_PATH/POSTFIX_TLS_CERTFILE) does not exist!!\n"
	    fi
	else
	    $PCONF -e "smtp_tls_cert_file ="
	fi
	if [ -n "$POSTFIX_TLS_KEYFILE" ]; then
	    if [ -s "$POSTFIX_SSL_PATH/$POSTFIX_TLS_KEYFILE" ]; then
		$PCONF -e "smtp_tls_key_file = $POSTFIX_SSL_PATH/$POSTFIX_TLS_KEYFILE"
	    else
		warn_user 1>&2 "\t smtp_tls_key_file (POSTFIX_SSL_PATH/POSTFIX_TLS_KEYFILE) does not exist!!\n"
	    fi
	else
	    $PCONF -e "smtp_tls_key_file ="
	fi
        if [ "$DEF_DB_TYPE" = "hash" ]; then
	    $PCONF -e "smtp_tls_session_cache_database = btree:/var/lib/postfix/smtp_tls_session_cache"
	    $PCONF -e "smtpd_tls_session_cache_database = btree:/var/lib/postfix/smtpd_tls_session_cache"
        else
	    $PCONF -e "smtp_tls_session_cache_database = $DEF_DB_TYPE:/var/lib/postfix/smtp_tls_session_cache"
	    $PCONF -e "smtpd_tls_session_cache_database = $DEF_DB_TYPE:/var/lib/postfix/smtpd_tls_session_cache"
	fi
    else
	$PCONF -e "smtp_tls_CAfile ="
	$PCONF -e "smtp_tls_CApath ="
	$PCONF -e "smtp_tls_cert_file ="
	$PCONF -e "smtp_tls_key_file ="
	$PCONF -e "smtp_tls_session_cache_database ="
    fi
    [ "$SPF_CHECKS" = "yes" ] && $PCONF -e "policyd-spf_time_limit = 3600"

    ALLMAPS="$DEF_DB_TYPE:/etc/aliases"
    for i in $(get_alias_maps); do
	ALLMAPS="${ALLMAPS}, $DEF_DB_TYPE:$i"
    done
    $PCONF -e "alias_maps = $ALLMAPS"

    for i in $(echo ${!POSTFIX_ADD_*}); do
        touch -m -d "1 minute ago" $TMPDIR/main.cf
	pfkey=$(echo ${i#POSTFIX_ADD_})
	pfval=$(eval "echo \$$i")
	if [ -z "$($PCONF $pfkey 2>/dev/null)" ]; then
	    pfkey=$(echo ${i#POSTFIX_ADD_} | tr '[:upper:]' '[:lower:]')
	    if [ -z "$($PCONF $pfkey 2>/dev/null)" ]; then
	    	warn_user 1>&2 "unknown parameter $i ignored"
	    else
		#old style uppercase written variable
	        $PCONF -e "$pfkey = $pfval"
	    fi
	else
	    $PCONF -e "$pfkey = $pfval"
	fi
    done

    perl -e 'use strict;

my $mncf = "$ENV{MCF_DIR}/main.cf";
my $line;

my $use_dkim =
    defined $ENV{USE_DKIM} ? $ENV{USE_DKIM} : "no";

$use_dkim = lc($use_dkim);

my $with_ldap =
    defined $ENV{POSTFIX_WITH_LDAP} ? $ENV{POSTFIX_WITH_LDAP} : "no";

$with_ldap = lc($with_ldap);

my $with_mysql =
    defined $ENV{POSTFIX_WITH_MYSQL} ? $ENV{POSTFIX_WITH_MYSQL} : "no";

$with_mysql = lc($with_mysql);

my $is_backupmx =
    defined $ENV{POSTFIX_BACKUPMX} ? $ENV{POSTFIX_BACKUPMX} : "no";

$is_backupmx = lc($is_backupmx);

my $pf_relay_domains = $ENV{POSTFIX_RELAY_DOMAINS};

my $pf_relay_recipients = $ENV{POSTFIX_RELAY_RECIPIENTS};

my $def_db_type = $ENV{DEF_DB_TYPE};

open(MNCF,"<$mncf") || die "unable to open $mncf: $!";

while( <MNCF> ) {
    chomp;

   if( /^\#?(smtpd_milters\s=.*)/ ) {
     if ($use_dkim ne "yes" or $use_dkim ne "opendkim") {
       $line = "#".$1;
     } else {
       $line = "#".$1;
     }
   } elsif( /^\#?(non_smtpd_milters\s=.*)/ ) {
     if ($use_dkim ne "yes" or $use_dkim ne "opendkim") {
       $line = "#".$1;
     } else {
       $line = "#".$1;
     }
   } elsif( /^\#?(milter_default_action\s=.*)/ ) {
     if ($use_dkim ne "yes" or $use_dkim ne "opendkim") {
       $line = "#".$1;
     } else {
       $line = $1;
     }
   } elsif( /^\#?(milter_protocol\s=.*)/ ) {
     if ($use_dkim ne "yes" or $use_dkim ne "opendkim") {
       $line = "#".$1;
     } else {
       $line = $1;
     }
   } elsif( /\#?(virtual_alias_maps\s=\s).*/ ) {
          if ($with_mysql ne "yes" && $with_ldap ne "yes") {
                $line = $1."$def_db_type:/etc/postfix/virtual";
          } elsif ($with_ldap eq "yes" && $with_mysql ne "yes") {
                $line = $1."$def_db_type:/etc/postfix/virtual ldap:/etc/postfix/ldap_aliases.cf";
          } elsif ($with_mysql eq "yes" && $with_ldap ne "yes") {
                $line = $1."$def_db_type:/etc/postfix/virtual mysql:/etc/postfix/mysql_virtual_alias_maps.cf mysql:/etc/postfix/mysql_virtual_alias_domain_maps.cf mysql:/etc/postfix/mysql_virtual_alias_domain_catchall_maps.cf";
          } elsif ($with_mysql eq "yes" && $with_ldap eq "yes") {
                $line = $1."$def_db_type:/etc/postfix/virtual ldap:/etc/postfix/ldap_aliases.cf mysql:/etc/postfix/mysql_virtual_alias_maps.cf mysql:/etc/postfix/mysql_virtual_alias_domain_maps.cf mysql:/etc/postfix/mysql_virtual_alias_domain_catchall_maps.cf";
	  }
	} elsif( /\#?(virtual_uid_maps\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_gid_maps\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_minimum_uid\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_mailbox_base\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_mailbox_domains\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_mailbox_limit\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_mailbox_maps\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_transport\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_mailbox_limit_maps\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_mailbox_limit_override\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_maildir_limit_message\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /\#?(virtual_overquota_bounce\s=.*)/ ) {
	  if ($with_mysql ne "yes") {
		$line = "#".$1;
	  } else {
		$line = $1;
	  }
	} elsif ( /^(relay_domains\s=\s).*/ ) {
	  if ($with_mysql ne "yes") {
		$line = $1."\$mydestination $def_db_type:/etc/postfix/relay $pf_relay_domains";
	  } else {
		$line = $1."\$mydestination $def_db_type:/etc/postfix/relay mysql:/etc/postfix/mysql_relay_domains_maps.cf $pf_relay_domains";
	  }
	} elsif ( /^(relay_recipient_maps\s=\s).*/ ) {
	  if ($is_backupmx ne "yes") {
		$line = $1."$def_db_type:/etc/postfix/relay_recipients";
	  } elsif ($with_mysql ne "yes") {
		$line = $1."$def_db_type:/etc/postfix/relay_recipients";
	  } elsif ($with_mysql eq "yes") {
		$line = $1."$def_db_type:/etc/postfix/relay_recipients mysql:/etc/postfix/mysql_relay_recipient_maps.cf $pf_relay_recipients";
	  } else {
		$line = $1."$def_db_type:/etc/postfix/relay_recipients $pf_relay_recipients";
	  }
	} else {
		$line = $_;
	}

	if( $line =~ /^\#/ ) {
		print $line."\n";
	next;
	} 

	print $line."\n";

}' > $TMPDIR/new.cf

    mv $TMPDIR/new.cf $TMPDIR/main.cf
    cat $TMPDIR/main.cf
    rm -rf $TMPDIR
}

gen_amavisd_cf(){
    [ ! -f /etc/amavisd.conf.back ] && cp /etc/amavisd.conf /etc/amavisd.conf.back
    export FQHOSTNAME
    export USE_DKIM
    if [ -n "${FQHOSTNAME}" ]; then
	perl -e 'use strict;
open(ACF,"</etc/amavisd.conf") || die "unable to open /etc/amavisd.conf: $!";
open(OUT,">/tmp/amavisd.conf");

my $myhostname   = $ENV{FQHOSTNAME};
my $use_dkim = $ENV{USE_DKIM};
my ($h,$mydomain)= split /\./, $myhostname, 2;
my $line;
while( <ACF> ) {
	chomp;
	if ( /^#?\s*\$myhostname = .*;(.*)/ )
	{
		$line = "\$myhostname = \"$myhostname\";".$1;
	} elsif ( /^\$mydomain = .*;(.*)/ )
        {
        	$line = "\$mydomain = \"$mydomain\";".$1;
	} elsif ( /^#?\s*(\$inet_socket_port = 10024.*)/ )
	{
		if ( $use_dkim ne "no" )
		{
			$line = "# ".$1 ;
		} else
		{
			$line = $1;
		}
	} elsif ( /^#?\s*(\$inet_socket_port = \[10024,10026\];.*)/ )
	{
		if ( $use_dkim ne "no" )
		{
			$line = $1;
		} else
		{
			$line = "# ".$1;
		}
	} elsif ( /^(  forward_method => .smtp:\[127.0.0.1\]:)(\d{5})(.*)/ )
	{
		if ( $use_dkim eq "yes" )
		{
			$line = $1."10025".$3;
		} else
		{
			$line = $1."10027".$3;
		}
	} elsif ( /^(\$enable_dkim_verification = )\d(;\s+#\s+)[a-z]+(\s+DKIM.*)/ )
	{
		if ( $use_dkim eq "yes" )
		{
			$line = $1."1".$2."enable".$3;
		} else
		{
			$line = $1."0".$2."disable".$3;
		}
	} elsif ( /^(\$enable_dkim_signing = )\d(;\s+#\s+)[a-z]+(\s+DKIM.*)/ )
	{
		if ( $use_dkim eq "yes" )
		{
			$line = $1."1".$2."enable".$3;
		} else
		{
			$line = $1."0".$2."disable".$3;
		}
		} else
	{
		$line = $_;
	}
	print OUT $line."\n";
}
close(ACF);
close(OUT);
'
	host=${FQHOSTNAME%%.*}
	domain=${FQHOSTNAME#*.}
	mkdir -p /etc/dkim
	if [ "${USE_DKIM}" = "yes" ] ; then
	    if [ $(ls /etc/dkim/${domain}.dkim*.pem 2>/dev/null | wc -l) -eq 0 ] ; then
		date=$(date --date=now +%Y%m%d)
		amavisd -c /tmp/amavisd.conf genrsa /etc/dkim/${domain}.dkim${date}.pem 2048
		chmod 640 /etc/dkim/${domain}.dkim${date}.pem
		chown root:vscan /etc/dkim/${domain}.dkim${date}.pem
	    else
		date=$(ls /etc/dkim/${domain}.dkim*.pem | tail -1)
		date=${date%.pem}
		date=${date##*dkim}
	    fi
	    grep -E -q '^dkim_key\($' /tmp/amavisd.conf
	    [ $? -ne 0 ] && cat <<EOF >> /tmp/amavisd.conf
dkim_key(
   '${domain}',
   'dkim${date}',
   '/etc/dkim/${domain}.dkim${date}.pem'
   );
 @dkim_signature_options_bysender_maps = ( {
   "${domain}" => {
     d   => '${domain}',
     a   => 'rsa-sha256',
     c   => 'relaxed/simple',
     ttl => 10*24*3600
     }
   } );
EOF
	    [ ! -e /etc/dkim/${domain}.dkim${date}.txtrecord ] && \
		amavisd -c /tmp/amavisd.conf showkeys > /etc/dkim/${domain}.dkim${date}.txtrecord
	fi
    fi
}

gen_opendkim(){
    if [ ! -d /etc/opendkim ] ; then
	warn_user "\tPackage opendkim is not installed!!!\n\
\tThis should not happen!\n\
\tPlease reinstall package opendkim!"
	exit 1
    fi
    cfolder="$(pwd)"
    mkdir -p /etc/dkim
    cd /etc/dkim
    dkimfile=$(ls $domain.dkim*.pem 2>/dev/null | head -1)
    if [ "$dkimfile" = "" ] ; then
	date=$(date --date=now +%Y%m%d)
	opendkim-genkey -b 2048 -h sha256 -s dkim$date -d $domain
	chmod 640 dkim$date.private
	mv dkim$date.private $domain.dkim$date.pem
	mv dkim$date.txt $domain.dkim$date.txtrecord
    else
	date=${dkimfile%.pem}
	date=${date##*dkim}
    fi
    cd $cfolder
    grep -q -E "^# Mode[[:blank:]]+sv$" /etc/opendkim/opendkim.conf
    if [ $? -eq 0 ] ; then
	cat <<EOF > /tmp/sedscript.txt
/^# Mode[[:blank:]]+sv$/ s/^# //
/^Socket[[:blank:]]+/ c\Socket   inet:8891@localhost
/^# ReportAddress[[:blank:]]+/ c\ReportAddress    "Postmaster $domain" <postmaster@$domain>
/^# SoftwareHeaders[[:blank:]]+/ c\SoftwareHeaders    yes
/^# Canonicalization[[:blank:]]+/ c\Canonicalization  relaxed/simple
/^# Domain[[:blank:]]+/ c\Domain    $domain
/^Selector[[:blank:]]+/ c\Selector  dkim$date
/^# KeyFile[[:blank:]]+/ c\KeyFile   /etc/dkim/$domain.dkim$date.pem
/^# OverSignHeaders[[:blank:]]+/ c\OverSignHeaders   From
/^# ExternalIgnoreList[[:blank:]]+/ c\ExternalIgnoreList refile:/etc/opendkim/TrustedHosts
/^# InternalHosts[[:blank:]]+/ c\InternalHosts refile:/etc/opendkim/TrustedHosts
EOF
	[ ! -e /etc/opendkim/opendkim.conf.backup ] && \
	cp -a /etc/opendkim/opendkim.conf /etc/opendkim/opendkim.conf.backup
	sed -r -i -f /tmp/sedscript.txt /etc/opendkim/opendkim.conf
	rm /tmp/sedscript.txt
	grep -q -E "^Statistics[[:blank:]]+" /etc/opendkim/opendkim.conf
	[ $? -ne 0 ] && echo "Statistics  /var/spool/opendkim/stats.dat" >> /etc/opendkim/opendkim.conf
	mkdir -p /var/spool/opendkim
	echo -e "127.0.01\nlocalhost\n\n*.$domain" > /etc/opendkim/TrustedHosts
    fi
    [ "$(systemctl is-enabled opendkim.service)" != "enabled" ] && systemctl enable opendkim.service
    [ "$(systemctl is-active opendkim.service)" != "active" ] && systemctl start opendkim.service || \
	systemctl restart opendkim.service
}

gen_master_cf(){
    export POSTFIX_LAPTOP
    export POSTFIX_CHROOT
    export POSTFIX_NULLCLIENT
    export USE_AMAVIS
    export USE_DKIM
    export POSTFIX_DKIM_CONN
    export POSTFIX_SMTP_AUTH_SERVER
    export POSTFIX_SMTP_TLS_SERVER
    export POSTFIX_SMTP_TLS_SERVER_LEGACY_SUPPORT
    export POSTFIX_SMTP_TLS_CLIENT
    export DEF_DB_TYPE
    export POSTFIX_SPF_CHECKS
    export POSTFIX_DMARC_CHECKS

    perl -e 'use strict;

my $mcf = "/etc/postfix/master.cf";
my $line;

my $laptop = 
    defined $ENV{POSTFIX_LAPTOP} ? $ENV{POSTFIX_LAPTOP} : "no";
my $nullclient = 
    defined $ENV{POSTFIX_NULLCLIENT} ? $ENV{POSTFIX_NULLCLIENT} : "no";
my $chroot = 
    defined $ENV{POSTFIX_CHROOT} ? $ENV{POSTFIX_CHROOT} : "yes";
my $use_amavis =
    defined $ENV{USE_AMAVIS} ? $ENV{USE_AMAVIS} : "no";
my $usedkim = 
    defined $ENV{USE_DKIM} ? $ENV{USE_DKIM} : "no";
my $dkimconn = 
    defined $ENV{POSTFIX_DKIM_CONN} ? $ENV{POSTFIX_DKIM_CONN} : "socket";
my $tlsserver = 
    defined $ENV{POSTFIX_SMTP_TLS_SERVER} ? $ENV{POSTFIX_SMTP_TLS_SERVER} : "no";
my $sslserver = 
    defined $ENV{POSTFIX_SMTP_TLS_SERVER_LEGACY_SUPPORT} ? $ENV{POSTFIX_SMTP_TLS_SERVER_LEGACY_SUPPORT} : "no";
my $tlsclient = 
    defined $ENV{POSTFIX_SMTP_TLS_CLIENT} ? $ENV{POSTFIX_SMTP_TLS_CLIENT} : "no";
my $authserver = 
    defined $ENV{POSTFIX_SMTP_AUTH_SERVER} ? $ENV{POSTFIX_SMTP_AUTH_SERVER} : "no";
my $spfchecks = 
    defined $ENV{POSTFIX_SPF_CHECKS} ? $ENV{POSTFIX_SPF_CHECKS} : "no";
my $dmarcchecks = 
    defined $ENV{POSTFIX_DMARC_CHECKS} ? $ENV{POSTFIX_DMARC_CHECKS} : "no";
my $normalize = {};


$laptop = lc($laptop);
$chroot = lc($chroot);
$nullclient = lc($nullclient);
$use_amavis = lc($use_amavis);
$usedkim = lc($usedkim);
$dkimconn = lc($dkimconn);
$tlsserver = lc($tlsserver);
$tlsclient = lc($tlsclient);
$authserver = lc($authserver);
$spfchecks = lc($spfchecks);
$dmarcchecks = lc($dmarcchecks);

open(MCF,"<$mcf") || die "unable to open $mcf: $!";

while( <MCF> ) {
    chomp;

    if( /^\#?\s*(smtp\s+inet.*?smtpd)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ($nullclient eq "yes") {
	    $line = "#".$1;
	} else {
	    $line = $1;
	}
	if ( $use_amavis eq "yes" ) {
	    $line =~ /(\#?\s*smtp\s+inet\s+[yn-]?\s+[yn-]?\s+[yn-]?\s+[0-9?yn-]?\s+)[0-9-]+(.*)/;
	    $line = $1."-".$2;
	} else {
	    $line =~ /(\#?\s*smtp\s+inet\s+[yn-]?\s+[yn-]?\s+[yn-]?\s+[0-9?yn-]?\s+)[0-9-]+(.*)/;
	    $line = $1."-".$2;
	}
    } elsif ( /^\#?(\s*-o smtpd_relay_restrictions=check_policy_service.*)/ ) {
	if ( $spfchecks eq "yes" ) {
	    $line =  $1;
	} else {
	    $line = "#".$1;
	}
    } elsif ( /^\#?(\s*-o smtpd_milters=inet:127\.0\.0\.1:)/ ) {
	if ( $usedkim eq "opendkim" ) {
	    $line = $1."8891";
	} elsif ( $usedkim eq "opendkim" and $dmarcchecks eq "yes" ) {
	    $line = $1."8891,inet:127.0.0.1:8893";
	} elsif ( $dmarcchecks eq "yes" ) {
	    $line = $1."8893";
	} else {
	    $line = "#".$1."8891";
	}
    } elsif ( /^\#?(\s*-o non_smtpd_milters=inet:127\.0\.0\.1:)/ ) {
	if ( $usedkim eq "opendkim" ) {
	    $line = $1."8891";
	} elsif ( $usedkim eq "opendkim" and $dmarcchecks eq "yes" ) {
	    $line = $1."8891,inet:127.0.0.1:8893";
	} elsif ( $dmarcchecks eq "yes" ) {
	    $line = $1."8893";
	} else {
	    $line = "#".$1."8891";
	}
    ## amavis
    } elsif( /^\#?\s*(amavis\s+unix.*)/ ) {
	if ($use_amavis ne "yes") {
	    $line = "#".$1;
	} else {
	    $line = $1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtp_data_done_timeout=.*)/ ) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtp_send_xforward_command=.*)/ ) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+disable_dns_lookups=.*)/ ) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+max_use=.*)/ ) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    ## end amavis
    } elsif( /^\#?\s*(local\s+unix.*)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ($nullclient eq "yes") {
	    $line = "#".$1;
	} else {
	    $line = $1;
	}
    ## submission
    } elsif( /^\#?\s*(submission\s+inet.*?smtpd)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ( $tlsserver ne "yes" ) {
	     $line = "#".$1;
	} else {
	     $line = $1;
	}
	if ( $use_amavis eq "yes" ) {
	     $line =~ /(^\#?\s*submission\s+inet\s+[yn-]?\s+[yn-]?\s+[yn-]?\s+[0-9?yn-]?\s+)[0-9-]+(.*)/;
	     $line = $1."10".$2;
	} else {
	     $line =~ /(^\#?\s*submission\s+inet\s+[yn-]?\s+[yn-]?\s+[yn-]?\s+[0-9?yn-]?\s+)[0-9-]+(.*)/;
	     $line = $1."-".$2;
	}
    } elsif( /^\#?\s{3}(-o\s+syslog_name=.*)/ ) {
	if ( $tlsserver ne "yes" ) {
	     $line = "#   ".$1;
	} else {
	     $line = "   ".$1;
	}
    } elsif( /^\#?\s{3}(-o\s+smtpd_tls_security_level=.*)/ ) {
	if ( $tlsserver ne "yes" ) {
	     $line = "#   ".$1;
	} else {
	     $line = "   ".$1;
	}
    } elsif ( /^\#?\s{3}(-o\s+content_filter=smtp:.*:)\d{5}/ ) {
	if ( $tlsserver eq "yes" and $usedkim ne "no" ) {
	    $line = "   ".$1."10026";
	} else {
	    $line = "#   ".$1."10024";
	}
    } elsif( /^\#?\s{3}(-o\s+smtpd_sasl_auth_enable=.*)/ ) {
	if ( $tlsserver eq "yes" && $authserver eq "yes") {
	     $line = "   ".$1;
	} else {
	     $line = "#   ".$1;
	}
    } elsif( /^\#?\s{3}(-o\s+smtpd_tls_auth_only=.*)/ ) {
	if ( $tlsserver eq "yes" && $authserver eq "yes") {
	     $line = "   ".$1;
	} else {
	     $line = "#   ".$1;
	}
    } elsif( /^\#?\s{3}(-o\s+smtpd_relay_restrictions=.*)/ ) {
	if ( $tlsserver ne "yes" ) {
	     $line = "#   ".$1;
	} else {
	     $line = "   ".$1;
	}
    } elsif( /^\#?\s{3}(-o\ssmtpd_reject_unlisted_recipient=no)/ ) {
	if ( $tlsserver ne "yes" ) {
             $line = "#   ".$1;
        } else {
             $line = "   ".$1;
        }
    } elsif( /^\#?\s{3}(-o\ssmtpd_recipient_restrictions=)/ ) {
	if ( $tlsserver ne "yes" ) {
             $line = "#   ".$1;
        } else {
             $line = "   ".$1;
        }
    } elsif( /^\#?\s{3}(-o\ssmtpd_relay_restrictions=permit_sasl_authenticated,reject)/ ) {
	if ( $tlsserver ne "yes" ) {
             $line = "#   ".$1;
        } else {
             $line = "   ".$1;
        }
    } elsif ( /^\#?\s{3}(-o\smilter_macro_daemon_name=ORIGINATING)/ ) {
        if ( $tlsserver eq "yes" and $usedkim ne "no" ) {
            $line = "   ".$1;
        } else {
            $line = "#   ".$1;
        }
    } elsif (/^\#?\s{3}(-o\sdisable_vrfy_command=yes)/ ) {
	if ( $tlsserver eq "yes") {
	    $line = "   ".$1;
        } else {
            $line = "#   ".$1;
        }
    ## end submission
    ## submissions
    } elsif( /^\#?\s*(submissions\s+inet.*?smtpd)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ( $sslserver ne "yes" ) {
	     $line = "#".$1;
	} else {
	     $line = $1;
	}
	if ( $use_amavis eq "yes" ) {
	     $line =~ /(^\#?\s*submissions\s+inet\s+[yn-]?\s+[yn-]?\s+[yn-]?\s+[0-9?yn-]?\s+)[0-9-]+(.*)/;
	     $line = $1."10".$2;
	} else {
	     $line =~ /(^\#?\s*submissions\s+inet\s+[yn-]?\s+[yn-]?\s+[yn-]?\s+[0-9?yn-]?\s+)[0-9-]+(.*)/;
	     $line = $1."-".$2;
	}
    } elsif( /^\#?\s{4}(-o\s+syslog_name=.*)/ ) {
	if ( $sslserver ne "yes" ) {
	     $line = "#    ".$1;
	} else {
	     $line = "    ".$1;
	}
    } elsif( /^\#?\s{4}(-o\s+smtpd_tls_wrappermode=.*)/ ) {
	if ( $sslserver ne "yes" ) {
	     $line = "#    ".$1;
	} else {
	     $line = "    ".$1;
	}
    } elsif( /^\#?\s{4}(-o\s+content_filter=smtp:.*:)\d{5}/ ) {
	if ( $sslserver eq "yes" && $use_amavis eq "yes" ) {
	    if ( $usedkim eq "yes" ) {
		    $line = "    ".$1."10026";
	    } else {
		$line = "    ".$1."10024";
	    }
	} else {
	    $line = "#    ".$1."10024";
	}
    } elsif( /^\#?\s{4}(-o\s+smtpd_sasl_auth_enable=.*)/ ) {
	if ( $sslserver eq "yes" && $authserver eq "yes") {
	     $line = "    ".$1;
	} else {
	     $line = "#    ".$1;
	}
    } elsif ( /\#?\s{4}(-o\ssmtpd_reject_unlisted_recipient=no)/ ) {
	if ( $sslserver eq "yes" && $authserver eq "yes") {
             $line = "    ".$1;
        } else {
             $line = "#    ".$1;
        }
    } elsif( /^\#?\s{4}(-o\s+smtpd_relay_restrictions=.*)/ ) {
	if ( $sslserver ne "yes" ) {
	     $line = "#    ".$1;
	} else {
	     $line = "    ".$1;
	}
    } elsif ( /^\#?\s{4}(-o\smilter_macro_daemon_name=ORIGINATING)/ ) {
	if ( $sslserver eq "yes" and $usedkim eq "yes" ) {
	    $line = "    ".$1;
	} else {
	    $line = "#    ".$1;
	}
    ## end submissions
    ## tlsmgr
    } elsif( /^\#?\s*(tlsmgr\s+unix.*)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ( $tlsclient eq "no" && $tlsserver ne "yes" && $sslserver ne "yes" ) {
	    $line = "#".$1;
	} else {
	    $line = $1;
	}
    ## end tlsmgr
    ## localhost_10025 
    } elsif( /^\#?\s*(localhost:10025\s+inet.*)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ( $use_amavis ne "yes" ) {
	    $line = "#".$1;
	} else {
	    $line = $1;
	}
    } elsif ( /^\#?\s\s(-o\s+content_filter=.*)/ ) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_delay_reject=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    # next should match
    # #  -o smtpd_client_restrictions=permit_mynetworks,reject
    # and not
    # #  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
    } elsif ( /^\#?\s\s(-o\s+smtpd_client_restrictions=)(.*)/) {
	if ( $2 eq "permit_mynetworks,reject") {
	  if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1.$2;
	  } else {
	    $line = "  ".$1.$2;
	  }
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_helo_restrictions=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_sender_restrictions=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_recipient_restrictions=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
   } elsif ( /^\#?\s\s(-o\s+smtpd_data_restrictions=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_end_of_data_restrictions=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_restriction_classes=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+mynetworks=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_error_sleep_time=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_soft_error_limit=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_hard_error_limit=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_client_connection_count_limit=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+smtpd_client_connection_rate_limit=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+receive_override_options=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	    if( $line !~ /receive_override_options=no_unknown_recipient_checks,no_header_body_checks/ )
	    {
	      $line = "  -o receive_override_options=no_unknown_recipient_checks,no_header_body_checks";
	    }
	}
     } elsif ( /^\#?\s\s(-o\s+local_header_rewrite_clients=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
     } elsif ( /^\#?\s\s(-o\s+local_recipient_maps=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    } elsif ( /^\#?\s\s(-o\s+relay_recipient_maps=.*)/) {
	if ( $use_amavis ne "yes" ) {
	    $line = "#  ".$1;
	} else {
	    $line = "  ".$1;
	}
    ## end localhost_10025
    ## 127.0.0.1:10027
    } elsif( /^\#?\s*(127.0.0.1:10027\s+inet.*)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ( $usedkim ne "opendkim" ) {
	    $line = "#".$1;
	} else {
	    $line = $1;
	}
    } elsif ( /^\#?\s{5}(-o\s)(.*)/ ) {
	if ( $usedkim ne "opendkim" ) {
	    $line = "#     ".$1.$2;
	} else {
	    $line = "     ".$1.$2;
	}
    ## end 127.0.0.1:10027
    ## policyd-spf
    } elsif( /^\#?\s*(policyd-spf\s+unix)(\s+.*)/ ) {
	if( defined $normalize->{$1} ) {next; } else { $normalize->{$1} =1; }
	if ( $spfchecks ne "yes" ) {
	    $line = "#".$1.$2;
	} else {
	    $line = $1.$2;
	}
    } elsif( /\#?(\s+argv=\/usr\/lib\/policyd-spf-perl)/ ) {
	if ( $spfchecks ne "yes" ) {
            $line = "#".$1;
        } else {
            $line = $1;
        }
    } elsif( /^(\#?\s*(?:pickup|qmgr)\s+)(?:fifo|unix)(\s+.*)/ ) {
	if( defined $normalize->{$1} ) { next; } else { $normalize->{$1} = 1; }
	if ( $laptop eq "yes" ) {
	     $line = $1."unix".$2;
	} else {
	     $line = $1."fifo".$2;
	}
    } else {
	$line = $_;
    }

    if( $line =~ /^\#/ ) {
	print $line."\n";
	next;
    }

    my $match = 0;
    foreach my $serv ( ( "smtp", "pickup", "cleanup", "rewrite",
			 "bounce", "defer", "showq", "error",
			 "lmtp", "submissions", "tlsmgr", "localhost:10025" ) ) {
	if( $line =~ /^$serv\s+/ ) {
	    $line =~ /(^$serv\s+\w+\s+[yn-]?\s+[yn-]?\s+)[yn-]?(.*)/;
	    print $1.( $chroot eq "yes" ? "y" : "n" ).$2."\n";
	    $match = 1;
	} else {
	    next;
	}
    }
    print $line."\n" if ! $match;
}'

}

update_cf() {
    while test "x$1" != "x" ; do
	TMPFILE=$(mktemp /tmp/postfix.${1}.XXXXXX) || exit 1
	B=$( find /etc/postfix/${1} -printf %CY%Cm%Cd%Ck%CM )
	cp /etc/postfix/${1} "/var/adm/backup/postfix/${1}$B"
	cp /etc/postfix/${1} "/var/adm/backup/postfix/${1}"
	eval gen_${1/\./_} >  $TMPFILE
	mv -Z $TMPFILE /etc/postfix/${1};
	shift
    done
}

restore_cf() {
    while test "x$1" != "x" ; do
	warn_user "/etc/postfix/${1}: zero file size or missing, restoring
from /var/adm/backup/postfix/${1}"
	if [ ! -s /var/adm/backup/postfix/$1 ]; then
	    warn_user "/var/adm/backup/postfix/${1}: zero file size or missing, exiting..."
	    exit 1
	fi
	cp --remove-destination /var/adm/backup/postfix/$1 /etc/postfix/$1
	
	update_cf $1
	shift
    done
}

gen_CA() {
    openssl=/usr/bin/openssl
    sslpath=$POSTFIX_SSL_PATH
    dovecotpath=$DOVECOT_SSL_PATH
    sslconfig=$sslpath/openssl_postfix.conf
    date="$(date)"

    oldmask=$(umask)
    umask 077
    mkdir -p $sslpath/private
    mkdir -p $sslpath/certs
    mkdir -p $sslpath/newcerts

    test -f $sslpath/serial || \
	echo 01 > $sslpath/serial
    touch $sslpath/index.txt
    sed -e "s/@POSTFIX_SSL_COUNTRY@/$POSTFIX_SSL_COUNTRY/" \
	-e "s/@POSTFIX_SSL_STATE@/$POSTFIX_SSL_STATE/" \
	-e "s/@POSTFIX_SSL_LOCALITY@/$POSTFIX_SSL_LOCALITY/" \
	-e "s/@POSTFIX_SSL_ORGANIZATION@/$POSTFIX_SSL_ORGANIZATION/" \
	-e "s/@POSTFIX_SSL_ORGANIZATIONAL_UNIT@/$POSTFIX_SSL_ORGANIZATIONAL_UNIT/" \
	-e "s/@POSTFIX_SSL_COMMON_NAME@/$POSTFIX_SSL_CERTIFICATE_AUTHORITY/" \
	-e "s/@POSTFIX_SSL_EMAIL_ADDRESS@/$CERTIFICATE_AUTHORITY_EMAIL_ADDRESS/" \
	-e "s/@RANDOM@/${RANDOM}${RANDOM}/" \
	-e "s/@COMMENT@/generated by config.postfix at $date/" \
	/etc/postfix/openssl_postfix.conf.in > $sslconfig

    echo "creating CA request/certificate..."
    $openssl req -days 2000 -config $sslconfig -new -x509 -nodes \
	-keyout $sslpath/private/cakey.pem -out $sslpath/$POSTFIX_TLS_CAFILE 2>/dev/null || {
	echo "error creating CA request/certificate"
	rm -rf $sslpath
	umask $oldmask
	return
    }
	    
    echo "creating certificate request for postfix..."
    # change Common Name and Email address
    sed -i -e "s/$POSTFIX_SSL_CERTIFICATE_AUTHORITY/$POSTFIX_SSL_COMMON_NAME/" \
	-e "s/$CERTIFICATE_AUTHORITY_EMAIL_ADDRESS/$POSTFIX_SSL_EMAIL_ADDRESS/" $sslconfig
    $openssl req -config $sslconfig -new -nodes -keyout \
	$sslpath/$POSTFIX_TLS_KEYFILE -out $sslpath/certs/postfixreq.pem 2>/dev/null || {
	echo "error creating certificate request"
	rm -rf $sslpath
	umask $oldmask
	return
    }
    
    echo "signing server certificate for postfix..."
    $openssl ca -config $sslconfig -notext -batch \
	-out $sslpath/$POSTFIX_TLS_CERTFILE \
	-infiles $sslpath/certs/postfixreq.pem 2>/dev/null || {
	echo "error signing server certificate"
	rm -rf $sslpath
	umask $oldmask
	return
    }
   
    [ "$POSTFIX_SMTP_AUTH_SERVICE" = "dovecot" ] && {
	echo "creating certificate request for dovecot..."
	[ ! -d $dovecotpath ] && mkdir -p $dovecotpath
	# change Common Name and Organizational Unit
	sed -i -e "s/$POSTFIX_SSL_COMMON_NAME/$DOVECOT_SSL_COMMON_NAME/" \
		-e "s/$POSTFIX_SSL_ORGANIZATIONAL_UNIT/$DOVECOT_SSL_ORGANIZATIONAL_UNIT/" $sslconfig
	$openssl req -config $sslconfig -new -nodes -keyout \
	    $dovecotpath/$DOVECOT_TLS_KEYFILE -out $dovecotpath/dovecotreq.pem 2>/dev/null || {
	    echo "error creating certificate request for dovecot"
	    rm -rf $dovecotpath
	    rm -rf $sslpath
	    umask $oldmask
	    return
	}

	echo "signing server certificate for dovecot..."
	$openssl ca -config $sslconfig -notext -batch \
	    -out $dovecotpath/$DOVECOT_TLS_CERTFILE \
	    -infiles $dovecotpath/dovecotreq.pem 2>/dev/null || {
	    echo "error signing server certificate for dovecot"
	    rm -rf $dovecotpath
	    rm -rf $sslpath
	    umask $oldmask
	    return
	}
    chmod 755 $sslpath
    chmod 755 $sslpath/certs
    chmod 644 $sslpath/cacert.pem
    umask $oldmask
    }
}

gen_dovecot_cf() {
if [ ! -d /etc/dovecot ] ; then
    warn_user "\tPackage dovecot is not installed!!!\n\
\tThis should not happen!\n\
\tPlease reinstall package dovecot!"
    exit 1
fi
grep -q -E '^protocols = imap' /etc/dovecot/dovecot.conf
if [ $? -ne 0 ] ; then
    sed -i "/^#protocols = imap/a\protocols = imap" /etc/dovecot/dovecot.conf
fi
grep -q -E '^ssl = yes' /etc/dovecot/conf.d/10-ssl.conf
if [ $? -ne 0 ] ; then
    cat <<EOF > /tmp/sedscript.txt
/^#ssl = yes/s/^#//
/^#ssl_cert = </s/^#//
/^#ssl_key = </s/^#//
/^#ssl_dh/s/^#//
EOF
    sed -i -f /tmp/sedscript.txt /etc/dovecot/conf.d/10-ssl.conf
    rm /tmp/sedscript.txt
fi
grep -q -E '^  unix_listener /var/spool/postfix/private/auth' /etc/dovecot/conf.d/10-master.conf
if [ $? -ne 0 ] ; then
    cat <<EOF > /tmp/sedscript.txt
/^  # Postfix smtp-auth/,/^  #}$/ {
   /^  #unix_listener/s/#//
   /^  #  mode = 0666$/s/#//
   /^    mode = 0666$/a\    user = postfix\n   group = postfix
   /^  #}$/s/#//
   }
EOF
    sed -i -f /tmp/sedscript.txt /etc/dovecot/conf.d/10-master.conf
    rm /tmp/sedscript.txt
fi
grep -q -E '^mail_location = maildir' /etc/dovecot/conf.d/10-mail.conf
if [ $? -ne 0 ] ; then
    # the second line in the next file means: between line which begins with "namespace inbox {"
    # and the line which begins with "}" after the line which contains "  #prefix = " the line
    # with "  prefix = INBOX." should be inserted
    cat <<EOF > /tmp/sedscript.txt
/^#mail_location/a\mail_location = maildir:~/Maildir
/^namespace inbox {/,/^}/ {
        /^  #prefix = $/a\  prefix = INBOX.
}
EOF
    sed -i -f /tmp/sedscript.txt /etc/dovecot/conf.d/10-mail.conf
    rm /tmp/sedscript.txt
fi
[ $(systemctl is-enabled dovecot.service) != "enabled" ] && systemctl enable dovecot.service
[ $(systemctl is-active dovecot.service) != "active" ] && systemctl start dovecot.service
}

###############################################################################
#################################### MAIN #####################################
###############################################################################

r=$ROOT

echo "Reading $r/etc/sysconfig and updating the system..."

test -s $r/etc/sysconfig/postfix || {
    echo "No $r/etc/sysconfig/postfix found."
    exit 1
}
. $r/etc/sysconfig/postfix

# this file contains generic mail setup information
test -s $r/etc/sysconfig/mail || {
    echo "No $r/etc/sysconfig/mail found."
    exit 1
}
. $r/etc/sysconfig/mail

# We may need TIMEZONE for chroot setup
test -s $r/etc/sysconfig/clock && . $r/etc/sysconfig/clock

# Do not try to get a valid hostname as per boo#934060
if [ -z "$POSTFIX_MYHOSTNAME" ]; then
  FQHOSTNAME=$( hostname -f )
else
  FQHOSTNAME=$POSTFIX_MYHOSTNAME
fi

# check whether we want to use amavis
if [ -x /usr/sbin/amavisd ]; then
    test -s $r/etc/sysconfig/amavis && . $r/etc/sysconfig/amavis
    if [ "$USE_AMAVIS" = "yes" ]; then
        gen_amavisd_cf
	mv /tmp/amavisd.conf /etc/amavisd.conf
#	[ "$(systemctl is-enabled freshclam.service)" != "enabled" ] && systemctl enable freshclam.service
#	[ "$(systemctl is-active freshclam.service)" != "active" ] && systemctl start freshclam.service
#	sleep 5
	[ "$(systemctl is-enabled clamd.service)" != "enabled" ] && systemctl enable clamd.service
	[ "$(systemctl is-active clamd.service)" != "active" ] && systemctl start clamd.service
	sleep 5
	[ "$(systemctl is-enabled amavis.service)" != "enabled" ] && systemctl enable amavis.service
	sa-update
	[ "$(systemctl is-active amavis.service)" != "active" ] && systemctl start amavis.service
    fi
fi

# call gen_opendkim if required
[ "$USE_DKIM" = "openDKIM" ] && gen_opendkim

# call mkchroot. The conditions what to do take place in this function.
mkchroot

# restore main.cf and master.cf, if they had been removed by accident
test -z "$r" && {
    if [ ! -s /etc/postfix/main.cf ]; then
	restore_cf main.cf
    fi
    
    if [ ! -s /etc/postfix/master.cf ]; then
	restore_cf master.cf
    fi
}

if test -z "$r" && test "$POSTFIX_SMTP_TLS_SERVER" == yes ; then
    #test -d $POSTFIX_SSL_PATH || gen_CA
    test -e $POSTFIX_SSL_PATH/certs/postfixreq.pem || gen_CA
fi

if test "$MAIL_CREATE_CONFIG" = "yes"; then
	test -z "$r" && update_cf master.cf main.cf
fi

PFVERSION=$(/usr/sbin/postconf -h mail_version)
test -z "$PFVERSION" && {
    echo "ERROR - unable to determine the version of postfix, you are running"
    echo "This should not happen.  Exit..."
    exit 1
}
PFMAJOR=${PFVERSION:0:1}

if [ "$POSTFIX_SMTP_AUTH_SERVICE" == "dovecot" ] ; then
    gen_dovecot_cf
    if [ !  -e /etc/dovecot/dh.pem ] ; then
	echo "Dovecot needs a file /etc/dovecot/dh.pem which does not exists."
	echo "It takes quite some time to generate, so this will be done in subprocess."
	echo "Do NOT stop the computer until it is finished!!!!"
	openssl dhparam -out /etc/dovecot/dh.pem 4096 > /dev/null 2>&1 &
	echo "The process ID is: $!"
    fi
fi

if test -z "$r" && test "$POSTFIX_UPDATE_MAPS" == yes ; then
    test -e /etc/aliases && \
        if test /etc/aliases -nt /etc/aliases.${DB_SUFFIX} \
                -o ! -e /etc/aliases.${DB_SUFFIX} ; then
                echo "Rebuilding /etc/aliases.${DB_SUFFIX}."
                /usr/bin/newaliases
        fi
    update_db $POSTFIX_MAP_LIST

    for i in $(get_alias_maps); do
	if test $i -nt $i.${DB_SUFFIX} -o ! -e $i.${DB_SUFFIX}; then
	    echo "Rebuilding $i.${DB_SUFFIX}"
	    /usr/sbin/postalias $i
	fi
    done

    # Only reload when service is actually running
    /usr/sbin/postfix status 2> /dev/null && /usr/sbin/postfix reload > /dev/null 2>&1
fi
